<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="../static/css/detail.css" />
    <link rel="stylesheet" href="../static/css/detail_review.css" />
    <link rel="stylesheet" href="../static/css/footer.css" />
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>상세페이지</title>
  </head>
  <body>
    <!-- 헤더 삽입 -->
    <header></header>
    <!-- grid row1 -->
    <div class="gridRow1 container">
      <!-- 리뷰 페이지 네이션 테스트 -->
      <article class="article">
        <ul class="contents"></ul>
        <div class="buttons"></div>
      </article>
      <section class="reviewPagination">
        <script>
          // 리뷰 데이터를 받아온 후 실행되는 코드
          const renderReviews = (reviews) => {
            const contents = document.querySelector('.contents');

            // 리뷰 목록을 추가할 부모 요소 선택 후 초기화
            contents.innerHTML = '';

            // 리뷰 데이터를 순회하면서 HTML에 동적으로 추가
            reviews.forEach((review, index) => {
              const content = makeContent(index, review); // makeContent 함수는 리뷰 내용을 생성하는 함수로 가정
              contents.appendChild(content);
            });
          };

          const contents = document.querySelector('.contents');
          const buttons = document.querySelector('.buttons');
          const numOfContent = 30;
          const maxContent = 3;
          const maxButton = 5;
          const maxPage = Math.ceil(numOfContent / maxContent);
          let page = 1;
          let prev, next;
          // 리뷰 목록
          // db랑 연동해야함
          const makeContent = (id, reviewData) => {
            if (!reviewData || !reviewData.commentid) {
              console.error('Invalid review data: ', reviewData)
              return null;
            }
            const {
              commentid,
              useridx,
              description,
              rate
            } = reviewData;
            const content = document.createElement('li');
            content.classList.add('content');
            content.innerHTML = `
              <span class="contentId">${contentId}</span>
              <span class="contentNickname">${contentNickname}</span>
              <span class="contentReview">${contentReview}</span>
              <span class="contentRate">${contentRate}</span>
            `;
            return content;
          };
          const makeButton = (id) => {
            const button = document.createElement('button');
            button.classList.add('button');
            button.dataset.num = id;
            button.innerText = id;
            button.addEventListener('click', (e) => {
              Array.prototype.forEach.call(buttons.children, (button) => {
                if (button.dataset.num) button.classList.remove('active');
              });
              e.target.classList.add('active');
              renderContent(parseInt(e.target.dataset.num));
            });
            return button;
          };
          const goPrevPage = () => {
            page = Math.max(page - 1, 1);
            render(page);
          };
          const goNextPage = () => {
            page = Math.min(page + 1, maxPage);
            render(page);
          };
          // 렌더링
          const renderContent = (page) => {
            while (contents.hasChildNodes()) {
              contents.removeChild(contents.lastChild);
            }
            for (
              let id = (page - 1) * maxContent + 1; id <= page * maxContent && id <= numOfContent; id++
            ) {
              contents.appendChild(makeContent(id));
            }
          };
          const renderButton = (page) => {
            if (prev && buttons.contains(prev)) {
              buttons.removeChild(prev);
            } else if (next && buttons.contains(next)) {
              buttons.removeChild(next);
            }
            while (buttons.hasChildNodes()) {
              buttons.removeChild(buttons.lastChild);
            }
            for (let id = page; id < page + maxButton && id <= maxPage; id++) {
              buttons.appendChild(makeButton(id));
            }
            buttons.children[0].classList.add('active');
          };
          const render = (page) => {
            renderButton(page);
            renderContent(page);
          };
          render(page);
        </script>
      </section>
      <!-- 리뷰 작성 폼 -->
      <div class="starRate">
        <form class="mb-3" name="myform" id="myform" method="post">
          <!-- 별점 남기기 -->
          <fieldset>
            <span class="text-bold">별점을 선택해주세요</span>
            <input type="radio" name="reviewStar" value="5" id="rate1" /><label for="rate1" onclick="saveRating(5)">★</label>
            <input type="radio" name="reviewStar" value="4" id="rate2" /><label for="rate2" onclick="saveRating(4)">★</label>
            <input type="radio" name="reviewStar" value="3" id="rate3" /><label for="rate3" onclick="saveRating(3)">★</label>
            <input type="radio" name="reviewStar" value="2" id="rate4" /><label for="rate4" onclick="saveRating(2)">★</label>
            <input type="radio" name="reviewStar" value="1" id="rate5" /><label for="rate5" onclick="saveRating(1)">★</label>
          </fieldset>
        </form>
      </div>
      <form class="myReview" action="/saveReview" method="post">
        <input type="text" class="writeReview" id="userReview" placeholder="리뷰를 작성해보세요" />
        <button type="button" class="submitReview" onclick="submitReview()">리뷰작성</button>
      </form>
    </div>
    <!-- grid row2 -->
    <div class="gridRow2 container">
      <!-- 포스터 api 받아오기 -->
      <div class="poster" id="poster_path"><img />포스터</div>
      <div class="rates">
        <!-- 평점 api 받아오기 -->
        <!-- 관객수 api 받아오기 -->
        <div class="movieGenre" id="genre">장르:</div>
        <!-- 개봉일 api 받아오기 -->
        <div class="movieRelease_date" id="release_date">개봉일:</div>
        <div class="movieName" id="movieName">제목:</div>
      </div>
      <div class="directors">
        <!-- 감독 api 받아오기 -->
        <!-- <div id="director">감독:</div> -->
      </div>
      <div class="actors">
        <!-- 배우 api 받아오기 -->
        <!-- <div id="actor">배우:</div> -->
      </div>
      <div class="summaries">
        <!-- 줄거리 api 받아오기 -->
        <div class="movieOverview" id="overview">영화 줄거리</div>
      </div>
    </div>
    <!-- grid row3 -->
    <div class="gridRow3 container">
      <input type="button" value="이전" />
      <div class="alikeMovies">
        <div id="alikeMovieLeft" class="alikeMovie">이 영화와 비슷한 영화 포스터</div>
        <div id="alikeMovieMain" class="alikeMovie">이 영화와 비슷한 영화 포스터</div>
        <div id="alikeMovieRight" class="alikeMovie">이 영화와 비슷한 영화 포스터</div>
      </div>
      <input type="button" value="다음" />
    </div>
    <footer>
      <div class="footer">
        <strong>주식회사</strong> 무비캐스터 <strong>대표</strong> 4FLEX 서울특별시 용산구 청파로
        109(나진전자월드상가) 3층 <br />
        <strong>사업자 등록 번호</strong> 595-95-0099 <br />
        © 2023 by MovieCaster, Inc. All rights reserved. <br />
      </div>
    </footer>
    <script>
      // 리뷰 받아오기
      const fetchAndRenderReviews = () => {
        axios.get('/getReviews') // 리뷰를 가져오는 엔드포인트로 수정해야 합니다.
          .then((response) => {
            const reviews = response.data; // 서버에서 받은 리뷰 데이터
            renderReviews(reviews); // 리뷰 데이터를 HTML에 추가하는 함수 호출
          })
          .catch((error) => {
            console.error('Error fetching reviews:', error);
          });
      };


      // 별점 선택
      let selectedRating = 0;

      function saveRating(value) {
        selectedRating = value;
        const data = {
          rate: selectedRating,
        };
        console.log('data_userRate: ', data);
      }

      function submitReview() {
        const description = document.getElementById('userReview').value;
        const rate = selectedRating;
        const data = {
          description: description,
          rate: rate,
        };
        axios({
            method: 'post',
            url: '/',
            data: data,
          })
          .then((response) => {
            console.log('Review Submitted: ', response.data);
            console.log('Review Sending: ', data);

            fetchAndRenderReviews();
          })
          .catch((error) => {
            console.error('Error submitting:', error);
          });
      }
      // 영화 상세정보 api 불러오기
    </script>
  </body>
</html>